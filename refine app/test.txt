<!DOCTYPE html>
<html lang="bn">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Smart Group Evaluator</title>
      <!-- Add these meta tags for better popup handling -->
      <meta http-equiv="Cross-Origin-Opener-Policy" content="same-origin-allow-popups">
      <meta http-equiv="Cross-Origin-Embedder-Policy" content="unsafe-none">
    <link rel="icon" href="https://public-frontend-cos.metadl.com/mgx/img/favicon.png" type="image/png" />
    
    <!-- Tailwind & Icons -->
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <link rel="stylesheet" href="style.css">
    <!-- Firebase -->
    <script src="https://www.gstatic.com/firebasejs/9.22.1/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.1/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.1/firebase-firestore-compat.js"></script>

</head>
<body class="bg-gray-50 dark:bg-darkBg text-gray-800 dark:text-gray-200 transition-colors duration-300">
    <!-- Authentication Modal -->
    <div id="authModal" class="modal">
        <div class="modal-content">
            <h3 class="text-lg font-semibold mb-4 text-center">লগইন করুন</h3>
            <div id="loginForm">
                <div class="mb-4">
                    <label class="block text-sm font-medium mb-2">ইমেইল</label>
                    <input id="loginEmail" type="email" class="w-full border border-gray-300 dark:border-gray-600 rounded-lg px-4 py-2 dark:bg-gray-700 focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="আপনার ইমেইল লিখুন" />
                </div>
                <div class="mb-4">
                    <label class="block text-sm font-medium mb-2">পাসওয়ার্ড</label>
                    <input id="loginPassword" type="password" class="w-full border border-gray-300 dark:border-gray-600 rounded-lg px-4 py-2 dark:bg-gray-700 focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="আপনার পাসওয়ার্ড লিখুন" />
                </div>
                <button id="loginBtn" class="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 rounded-lg transition-colors">লগইন</button>
                <div class="my-4 text-center relative">
                    <div class="absolute inset-0 flex items-center"><div class="w-full border-t border-gray-300"></div></div>
                    <div class="relative flex justify-center text-sm"><span class="px-2 bg-white dark:bg-darkCard text-gray-500">অথবা</span></div>
                </div>
                <button id="googleSignInBtn" class="w-full bg-red-600 hover:bg-red-700 text-white py-2 rounded-lg transition-colors flex items-center justify-center">
                    <i class="fab fa-google mr-2"></i> Google দিয়ে লগইন করুন
                </button>
                <p class="text-center mt-4 text-sm text-gray-600 dark:text-gray-400">
                    অ্যাডমিন অ্যাকাউন্ট নেই?
                    <button id="showRegister" class="text-blue-600 hover:underline">রেজিস্টার করুন</button>
                </p>
            </div>

            <div id="registerForm" class="hidden">
                <div class="mb-4">
                    <label class="block text-sm font-medium mb-2">ইমেইল</label>
                    <input id="registerEmail" type="email" class="w-full border border-gray-300 dark:border-gray-600 rounded-lg px-4 py-2 dark:bg-gray-700 focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="আপনার ইমেইল লিখুন" />
                </div>
                <div class="mb-4">
                    <label class="block text-sm font-medium mb-2">পাসওয়ার্ড</label>
                    <input id="registerPassword" type="password" class="w-full border border-gray-300 dark:border-gray-600 rounded-lg px-4 py-2 dark:bg-gray-700 focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="পাসওয়ার্ড লিখুন (ন্যূনতম ৬ অক্ষর)" />
                </div>
                <div class="mb-4">
                    <label class="block text-sm font-medium mb-2">অ্যাডমিন টাইপ</label>
                    <select id="adminType" class="w-full border border-gray-300 dark:border-gray-600 rounded-lg px-4 py-2 dark:bg-gray-700 focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        <option value="admin">সাধারণ অ্যাডমিন</option>
                        <option value="super-admin">সুপার অ্যাডমিন</option>
                    </select>
                </div>
                <button id="registerBtn" class="w-full bg-green-600 hover:bg-green-700 text-white py-2 rounded-lg transition-colors">রেজিস্টার</button>
                <p class="text-center mt-4 text-sm text-gray-600 dark:text-gray-400">
                    ইতিমধ্যে অ্যাকাউন্ট আছে?
                    <button id="showLogin" class="text-blue-600 hover:underline">লগইন করুন</button>
                </p>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div id="deleteModal" class="modal">
        <div class="modal-content">
            <h3 class="text-lg font-semibold mb-4">ডিলিট নিশ্চিতকরণ</h3>
            <p id="deleteModalText">আপনি কি নিশ্চিত যে আপনি এই আইটেমটি ডিলিট করতে চান?</p>
            <div class="modal-buttons">
                <button id="cancelDelete" class="px-4 py-2 bg-gray-300 dark:bg-gray-700 rounded-lg">বাতিল</button>
                <button id="confirmDelete" class="px-4 py-2 bg-red-600 text-white rounded-lg">ডিলিট</button>
            </div>
        </div>
    </div>

    <!-- Edit Modal -->
    <div id="editModal" class="modal">
        <div class="modal-content">
            <h3 id="editModalTitle" class="text-lg font-semibold mb-4">সম্পাদনা করুন</h3>
            <div id="editModalContent"></div>
            <div class="modal-buttons">
                <button id="cancelEdit" class="px-4 py-2 bg-gray-300 dark:bg-gray-700 rounded-lg">বাতিল</button>
                <button id="saveEdit" class="px-4 py-2 bg-blue-600 text-white rounded-lg">সংরক্ষণ করুন</button>
            </div>
        </div>
    </div>

    <!-- Loading Overlay -->
    <div id="loadingOverlay" class="modal" style="display: none">
        <div class="modal-content flex flex-col items-center justify-center">
            <div class="advanced-loader"><div></div><div></div></div>
            <p class="mt-4">লোড হচ্ছে...</p>
        </div>
    </div>

    <!-- Main App -->
    <div id="appContainer" class="app-container hidden">
        <!-- Sidebar -->
        <aside class="sidebar bg-white dark:bg-darkCard border-r border-gray-200 dark:border-gray-700">
            <div class="p-5 border-b border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-900 shadow-lg rounded-b-2xl transition-colors duration-300 max-w-md mx-auto">
                <div class="flex items-center space-x-4">
                    <div class="flex-shrink-0">
                        <div class="h-16 w-16 rounded-full bg-gradient-to-tr from-blue-400 to-blue-600 flex items-center justify-center text-white text-2xl font-bold shadow-md transform transition duration-500 hover:scale-105 hover:shadow-xl animate-pulse-slow">
                            MR
                        </div>
                    </div>
                    <div class="flex flex-col">
                        <h1 class="text-xl font-semibold text-gray-900 dark:text-gray-100">
                            Mustafa Rahman <span class="text-sm text-gray-500 dark:text-gray-400">(sir)</span>
                        </h1>
                        <p class="text-sm text-gray-500 dark:text-gray-400">Software Engineer, Turkey</p>
                    </div>
                </div>
                <div id="userInfo" class="mt-4 text-xs text-gray-400 dark:text-gray-500 italic"></div>
            </div>
            
            <nav class="p-4 space-y-2">
                <button data-page="dashboard" class="nav-btn w-full text-left px-3 py-3 rounded-lg flex items-center transition-colors bg-blue-50 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400">
                    <i class="fas fa-tachometer-alt mr-3"></i> ড্যাশবোর্ড
                </button>
                <button data-page="groups" class="nav-btn w-full text-left px-3 py-3 rounded-lg flex items-center transition-colors hover:bg-gray-100 dark:hover:bg-gray-700">
                    <i class="fas fa-users mr-3"></i> গ্রুপ ব্যবস্থাপনা
                </button>
                <button data-page="members" class="nav-btn w-full text-left px-3 py-3 rounded-lg flex items-center transition-colors hover:bg-gray-100 dark:hover:bg-gray-700">
                    <i class="fas fa-user-graduate mr-3"></i> শিক্ষার্থী ব্যবস্থাপনা
                </button>
                <button data-page="group-members" class="nav-btn w-full text-left px-3 py-3 rounded-lg flex items-center transition-colors hover:bg-gray-100 dark:hover:bg-gray-700">
                    <i class="fas fa-user-friends mr-3"></i> গ্রুপ সদস্য ব্যবস্থাপনা
                </button>
                <button data-page="all-students" class="nav-btn w-full text-left px-3 py-3 rounded-lg flex items-center transition-colors hover:bg-gray-100 dark:hover:bg-gray-700">
                    <i class="fas fa-id-card mr-3"></i> সকল গ্রুপ কার্ড
                </button>
                <button data-page="tasks" class="nav-btn w-full text-left px-3 py-3 rounded-lg flex items-center transition-colors hover:bg-gray-100 dark:hover:bg-gray-700">
                    <i class="fas fa-tasks mr-3"></i> টাস্ক ব্যবস্থাপনা
                </button>
                <button data-page="evaluation" class="nav-btn w-full text-left px-3 py-3 rounded-lg flex items-center transition-colors hover:bg-gray-100 dark:hover:bg-gray-700">
                    <i class="fas fa-clipboard-check mr-3"></i> মূল্যায়ন
                </button>
                <button data-page="group-policy" class="nav-btn w-full text-left px-3 py-3 rounded-lg flex items-center transition-colors hover:bg-gray-100 dark:hover:bg-gray-700">
                    <i class="fas fa-file-contract mr-3"></i> গ্রুপ পলিসি
                </button>
                <button data-page="export" class="nav-btn w-full text-left px-3 py-3 rounded-lg flex items-center transition-colors hover:bg-gray-100 dark:hover:bg-gray-700">
                    <i class="fas fa-file-export mr-3"></i> এক্সপোর্ট
                </button>

                <div id="adminManagementSection" class="hidden">
                    <button data-page="admin-management" class="nav-btn w-full text-left px-3 py-3 rounded-lg flex items-center transition-colors hover:bg-gray-100 dark:hover:bg-gray-700">
                        <i class="fas fa-user-shield mr-3"></i> অ্যাডমিন ব্যবস্থাপনা
                    </button>
                </div>
            </nav>

            <div class="absolute top-0 right-0 p-1">
                <div class="flex justify-between items-center">
                    <span class="text-sm font-medium text-gray-600 dark:text-gray-400 mr-2">Developed By Mustafa Rahman (v3.0)</span>
                    <div class="flex items-center space-x-5">
                        <button id="logoutBtn" class="flex items-center gap-2 px-3 py-1.5 text-sm font-medium text-white bg-red-500 hover:bg-red-600 rounded-xl shadow-sm transition">
                            <i class="fas fa-sign-out-alt"></i>
                            <span>লগআউট</span>
                        </button>
                        <button id="themeToggle" class="p-2 rounded-full bg-gray-200 dark:bg-gray-700 hover:scale-105 transition">
                            <i class="fas fa-moon text-gray-800 dark:text-yellow-400"></i>
                        </button>
                    </div>
                </div>
            </div>
        </aside>

        <!-- Main Content -->
        <div class="main-content">
            <!-- Header -->
            <header class="bg-white dark:bg-darkCard border-b border-gray-200 dark:border-gray-700 p-4 flex justify-between items-center">
                <h2 id="pageTitle" class="text-xl font-bold">ড্যাশবোর্ড</h2>
                <button id="mobileMenuBtn" class="mobile-menu-btn p-2 rounded-lg bg-gray-100 dark:bg-gray-800 lg:hidden">
                    <i class="fas fa-bars"></i>
                </button>
            </header>

            <!-- Page Content -->
            <div class="page-content">
                <!-- Dashboard Page -->
                <section id="page-dashboard" class="page fade-in">
                    <div class="mb-6">
                        <p class="text-gray-600 dark:text-gray-400">সারাংশ, র‌্যাঙ্কিং ও বিশদ ফলাফল</p>
                    </div>

                    <!-- Stats Summary -->
                    <div id="statsSummary" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6"></div>

                   

                    <!-- Academic Group Breakdown -->
                    <div id="academicGroupStats" class="bg-white dark:bg-darkCard rounded-xl shadow-md p-5 mb-8">
                        <h3 class="text-lg font-semibold mb-4">একাডেমিক গ্রুপ ভিত্তিক শিক্ষার্থী</h3>
                        <div id="academicGroupStatsList" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3"></div>
                    </div>

                    <!-- Problem Solving Stats -->
                    <div id="problemSolvingStats" class="bg-white dark:bg-darkCard rounded-xl shadow-md p-5 mb-8">
                        <h3 class="text-lg font-semibold mb-4">গ্রুপ প্রবলেম সলভিং পরিসংখ্যান</h3>
                        <div id="problemSolvingStatsList" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3"></div>
                    </div>

                    <!-- Top 3 Groups -->
                    <div class="mb-8">
                        <h3 class="text-lg font-semibold mb-4">শীর্ষ গ্রুপসমূহ</h3>
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-6" id="topGroupsContainer"></div>
                    </div>

                    <!-- All Groups Ranking List -->
                    <div class="bg-white dark:bg-darkCard rounded-xl shadow-md p-5">
                        <h3 class="text-lg font-semibold mb-4">গ্রুপ র‌্যাঙ্কিং</h3>
                        <div id="groupsRankingList" class="space-y-3"></div>
                    </div>

                    <!-- Group Details Section -->
                    <div id="groupDetails" class="mt-8 hidden"></div>
                </section>

                <!-- Other pages remain the same structure -->
                <!-- ... (other page sections) ... -->
            </div>
        </div>
    </div>

    <!-- Logout Modal -->
    <div id="logoutModal" class="fixed inset-0 bg-black/40 hidden items-center justify-center z-50">
        <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-xl p-6 max-w-sm w-full text-center">
            <h2 class="text-lg font-semibold text-gray-800 dark:text-gray-200 mb-3">লগআউট নিশ্চিত করুন</h2>
            <p class="text-sm text-gray-600 dark:text-gray-400 mb-6">আপনি কি সত্যিই লগআউট করতে চান?</p>
            <div class="flex justify-center gap-3">
                <button id="cancelLogout" class="px-4 py-2 rounded-lg bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-200 transition">বাতিল</button>
                <button id="confirmLogout" class="px-4 py-2 rounded-lg bg-red-500 hover:bg-red-600 text-white shadow transition">লগআউট</button>
            </div>
        </div>
    </div>

    <!-- Firebase Configuration -->
    <script>
      
    //   const firebaseConfig = {
    //     apiKey: "AIzaSyAkw1kL7AU73Y9FWrPZ-ERv5xFvXGGILBA",
    //     authDomain: "claritybudget-6lnmd.firebaseapp.com",
    //     projectId: "claritybudget-6lnmd",
    //     storageBucket: "claritybudget-6lnmd.firebasestorage.app",
    //     messagingSenderId: "40318182466",
    //     appId: "1:40318182466:web:c2ce0637f8f23afa95b9db",
    //   };

      const firebaseConfig = {
        apiKey: "AIzaSyDBmRyLNCeAFgk6ijMUf3YsnwyZTDCt8r8",
        authDomain: "course-admission-system.firebaseapp.com",
        projectId: "course-admission-system",
        storageBucket: "course-admission-system.firebasestorage.app",
        messagingSenderId: "133920238322",
        appId: "1:133920238322:web:5de05e75c91b2f6d5d3e6b",
      };

        firebase.initializeApp(firebaseConfig);
        const auth = firebase.auth();
        const db = firebase.firestore(); 
        const googleProvider = new firebase.auth.GoogleAuthProvider();
    </script>

    <!-- Application Script -->
    <script src="app.js"></script>

    <!-- JSZip for exporting all data as zip -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
</body>
</html>




@import url("https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap");

* { font-family: "Inter", sans-serif; }

body {
  margin: 0;
  padding: 0;
  height: 100vh;
  overflow: hidden;
}

.app-container {
  display: flex;
  height: 100vh;
}

.sidebar {
  width: 270px;
  flex-shrink: 0;
  height: 100%;
  overflow-y: auto;
}

.main-content {
  flex: 1;
  display: flex;
  flex-direction: column;
  height: 100%;
  overflow: hidden;
}

.page-content {
  flex: 1;
  overflow-y: auto;
  padding: 20px;
}

.gradient-bg {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.card-hover { transition: transform 0.3s, box-shadow 0.3s; }
.card-hover:hover {
  transform: translateY(-5px);
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
}

.glass-card {
  background: rgba(255,255,255,0.8);
  backdrop-filter: blur(6px);
}
.dark .glass-card {
  background: rgba(30,41,59,0.7);
}

.progress-bar {
  height: 8px;
  border-radius: 4px;
  overflow: hidden;
  background-color: #e5e7eb;
}
.progress-fill {
  height: 100%;
  border-radius: 4px;
  transition: width 0.5s ease-in-out;
}

.fade-in { animation: fadeIn 0.5s ease-in-out; }
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to   { opacity: 1; transform: translateY(0); }
}

.rank-badge {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 32px;
  height: 32px;
  border-radius: 50%;
  font-weight: bold;
  color: white;
}
.rank-1 { background: linear-gradient(135deg, #ffd700, #ffa500); box-shadow: 0 4px 6px rgba(255, 165, 0, 0.3); }
.rank-2 { background: linear-gradient(135deg, #c0c0c0, #a0a0a0); box-shadow: 0 4px 6px rgba(160, 160, 160, 0.3); }
.rank-3 { background: linear-gradient(135deg, #cd7f32, #a56a3a); box-shadow: 0 4px 6px rgba(165, 106, 58, 0.3); }
.rank-other { background: linear-gradient(135deg, #3b82f6, #2563eb); box-shadow: 0 4px 6px rgba(59, 130, 246, 0.3); }

.group-bar { transition: all 0.3s ease; cursor: pointer; }
.group-bar:hover { transform: translateX(5px); background-color: rgba(59, 130, 246, 0.05); }
.group-bar.active { background-color: rgba(59, 130, 246, 0.1); border-left: 4px solid #3b82f6; }

.loader {
  border: 4px solid #f3f3f3;
  border-top: 4px solid #3b82f6;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  animation: spin 1s linear infinite;
  margin: 20px auto;
}
@keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }

.modal {
  display: none;
  position: fixed;
  top: 0; left: 0;
  width: 100%; height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  z-index: 1000;
  justify-content: center;
  align-items: center;
}
.modal-content {
  background-color: white;
  padding: 20px;
  border-radius: 8px;
  width: 90%; max-width: 500px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}
.dark .modal-content { background-color: #1e293b; color: white; }
.modal-buttons { display: flex; justify-content: flex-end; gap: 10px; margin-top: 20px; }

.task-details { max-height: 0; overflow: hidden; transition: max-height 0.5s ease; }
.task-details.open { max-height: 1000px; }
.expand-icon { transition: transform 0.3s ease; }
.expand-icon.rotated { transform: rotate(180deg); }

.crown-icon { font-size: 24px; margin-bottom: 10px; }

.rank-card { position: relative; overflow: hidden; border-radius: 16px; padding: 20px; text-align: center; transition: all 0.3s ease; }
.rank-card::before { content: ""; position: absolute; top: 0; left: 0; right: 0; height: 4px; }
.rank-1-card::before { background: linear-gradient(90deg, #ffd700, #ffa500); }
.rank-2-card::before { background: linear-gradient(90deg, #c0c0c0, #a0a0a0); }
.rank-3-card::before { background: linear-gradient(90deg, #cd7f32, #a56a3a); }
.rank-card-glow { box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1); }

.rank-1-card { background: linear-gradient(135deg, #fff9e6, #fff0cc); border: 2px solid #ffd700; }
.rank-2-card { background: linear-gradient(135deg, #f5f5f5, #e8e8e8); border: 2px solid #c0c0c0; }
.rank-3-card { background: linear-gradient(135deg, #f8f0e6, #f0e0cc); border: 2px solid #cd7f32; }
.dark .rank-1-card { background: linear-gradient(135deg, #332900, #4d3d00); border: 2px solid #ffd700; }
.dark .rank-2-card { background: linear-gradient(135deg, #2a2a2a, #3a3a3a); border: 2px solid #c0c0c0; }
.dark .rank-3-card { background: linear-gradient(135deg, #332200, #4d3300); border: 2px solid #cd7f32; }

.rank-title { font-size: 18px; font-weight: bold; margin-bottom: 10px; text-transform: uppercase; letter-spacing: 1px; }
.rank-1-title { color: #d4af37; text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1); }
.rank-2-title { color: #c0c0c0; text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1); }
.rank-3-title { color: #cd7f32; text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1); }

.member-role-badge { display: inline-block; padding: 2px 8px; border-radius: 12px; font-size: 12px; font-weight: 500; margin-left: 5px; }
.team-leader { background-color: #3b82f6; color: white; }
.time-keeper { background-color: #10b981; color: white; }
.reporter { background-color: #f59e0b; color: white; }
.resource-manager { background-color: #8b5cf6; color: white; }
.peace-maker { background-color: #ec4899; color: white; }

.score-calculation-info {
  background: #f0f9ff; border-left: 4px solid #3b82f6;
  padding: 10px 15px; margin: 15px 0; border-radius: 0 8px 8px 0;
}
.dark .score-calculation-info { background: #1e3a5f; border-left: 4px solid #60a5fa; }

.advanced-loader { display: inline-block; position: relative; width: 80px; height: 80px; }
.advanced-loader div {
  position: absolute; border: 4px solid #3b82f6; opacity: 1; border-radius: 50%;
  animation: advanced-loader 1s cubic-bezier(0, 0.2, 0.8, 1) infinite;
}
.advanced-loader div:nth-child(2) { animation-delay: -0.5s; }
@keyframes advanced-loader {
  0% { top: 36px; left: 36px; width: 0; height: 0; opacity: 1; }
  100% { top: 0px; left: 0px; width: 72px; height: 72px; opacity: 0; }
}

.group-card-1 { background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%); }
.group-card-2 { background: linear-gradient(135deg, #a1c4fd 0%, #c2e9fb 100%); }
.group-card-3 { background: linear-gradient(135deg, #d4fc79 0%, #96e6a1 100%); }
.group-card-4 { background: linear-gradient(135deg, #fbc2eb 0%, #a6c1ee 100%); }
.group-card-5 { background: linear-gradient(135deg, #84fab0 0%, #8fd3f4 100%); }
.group-card-6 { background: linear-gradient(135deg, #a3bded 0%, #6991c7 100%); }
.group-card-7 { background: linear-gradient(135deg, #fad0c4 0%, #ffd1ff 100%); }
.group-card-8 { background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%); }
.dark .group-card-1 { background: linear-gradient(135deg, #4a2c00 0%, #7a3c1f 100%); }
.dark .group-card-2 { background: linear-gradient(135deg, #1a3c7d 0%, #1c5d7a 100%); }
.dark .group-card-3 { background: linear-gradient(135deg, #3a5a00 0%, #2a6a35 100%); }
.dark .group-card-4 { background: linear-gradient(135deg, #7a2c6b 0%, #3a4a8a 100%); }
.dark .group-card-5 { background: linear-gradient(135deg, #1a7a45 0%, #1a5a7a 100%); }
.dark .group-card-6 { background: linear-gradient(135deg, #2a3c7a 0%, #1a3560 100%); }
.dark .group-card-7 { background: linear-gradient(135deg, #7a3c2a 0%, #7a3a7a 100%); }
.dark .group-card-8 { background: linear-gradient(135deg, #7a2a2a 0%, #7a3a6a 100%); }

.serial-badge {
  position: absolute;
  top: 10px;
  left: 10px;
  background: rgba(0,0,0,0.6);
  color: #fff;
  font-weight: 700;
  border-radius: 9999px;
  padding: 4px 10px;
  font-size: 12px;
}

.group-serial {
  font-size: 4rem; font-weight: 900; opacity: 0.15;
  position: absolute; bottom: 10px; right: 20px; line-height: 1;
}

.search-container { position: relative; }
.search-icon {
  position: absolute; left: 12px; top: 50%;
  transform: translateY(-50%); color: #6b7280;
}
.search-input { padding-left: 40px; }

.tab-container { display: flex; border-bottom: 1px solid #e5e7eb; margin-bottom: 1rem; }
.tab { padding: 0.75rem 1.5rem; cursor: pointer; border-bottom: 2px solid transparent; transition: all 0.3s; }
.tab.active { border-bottom-color: #3b82f6; color: #3b82f6; font-weight: 600; }

.comment-section { margin-top: 1.5rem; padding-top: 1rem; border-top: 1px dashed #d1d5db; }

.student-card { transition: all 0.3s ease; border-radius: 12px; overflow: hidden; position: relative; }
.student-card:hover { transform: translateY(-5px); box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15); }
.student-avatar {
  width: 60px; height: 60px; border-radius: 50%;
  display: flex; align-items: center; justify-content: center;
  font-size: 24px; font-weight: bold; color: white; margin-right: 15px;
}

.policy-section { margin-bottom: 20px; border: 1px solid #e5e7eb; border-radius: 8px; overflow: hidden; }
.policy-header {
  background-color: #f9fafb; padding: 15px 20px; cursor: pointer;
  display: flex; justify-content: space-between; align-items: center; transition: background-color 0.3s;
}
.policy-header:hover { background-color: #f3f4f6; }
.policy-content { padding: 0; max-height: 0; overflow: hidden; transition: max-height 0.5s ease, padding 0.5s ease; }
.policy-content.open { padding: 20px; max-height: 1000px; }
.dark .policy-header { background-color: #374151; color: white; }
.dark .policy-header:hover { background-color: #4b5563; }

.logout-btn {
  display: flex; align-items: center; gap: 8px;
  padding: 8px 16px; border-radius: 8px; transition: all 0.3s;
  background-color: #fef2f2; color: #dc2626; font-weight: 500;
}
.logout-btn:hover { background-color: #fee2e2; transform: translateY(-1px); }
.dark .logout-btn { background-color: #7f1d1d; color: #fca5a5; }
.dark .logout-btn:hover { background-color: #991b1b; }

.csv-actions { display: flex; gap: 10px; margin-bottom: 20px; }
.csv-btn { display: flex; align-items: center; gap: 8px; padding: 10px 16px; border-radius: 8px; font-weight: 500; transition: all 0.3s; }
.import-btn { background-color: #dbeafe; color: #1e40af; }
.import-btn:hover { background-color: #bfdbfe; }
.export-btn { background-color: #dcfce7; color: #166534; }
.export-btn:hover { background-color: #bbf7d0; }
.dark .import-btn { background-color: #1e3a8a; color: #93c5fd; }
.dark .import-btn:hover { background-color: #1e40af; }
.dark .export-btn { background-color: #14532d; color: #86efac; }
.dark .export-btn:hover { background-color: #166534; }

@media (max-width: 768px) {
  .app-container { flex-direction: column; }
  .sidebar { width: 100%; height: auto; max-height: 200px; }
  .main-content { height: calc(100vh - 200px); }
  .mobile-menu-btn { display: block; }
  .sidebar.hidden-mobile { display: none; }
  .sidebar.active-mobile { display: block; }
  .group-serial { font-size: 3rem; top: 5px; right: 15px; }
  .csv-actions { flex-direction: column; }
}


tailwind.config = {
    darkMode: "class",
    theme: {
      extend: {
        colors: {
          primary: "#3b82f6",
          secondary: "#10b981",
          accent: "#f59e0b",
          darkBg: "#0f172a",
          darkCard: "#1e293b",
          gold: "#FFD700",
          silver: "#C0C0C0",
          bronze: "#CD7F32",
        },
        animation: {
          "pulse-slow": "pulse 3s linear infinite",
          "bounce-slow": "bounce 2s infinite",
          "spin-slow": "spin 3s linear infinite",
        },
      },
    },
  };
  

// ===============================
// CACHE MANAGEMENT SYSTEM
// ===============================
class CacheManager {
    constructor() {
        this.CACHE_DURATION = 10 * 60 * 1000; // 10 minutes
        this.PREFIX = 'smart_evaluator_';
    }

    set(key, data, customDuration = null) {
        const cacheData = {
            data,
            timestamp: Date.now(),
            expires: Date.now() + (customDuration || this.CACHE_DURATION)
        };
        localStorage.setItem(this.PREFIX + key, JSON.stringify(cacheData));
    }

    get(key) {
        const cached = localStorage.getItem(this.PREFIX + key);
        if (!cached) return null;

        try {
            const { data, timestamp, expires } = JSON.parse(cached);
            
            if (Date.now() > expires) {
                this.clear(key);
                return null;
            }
            return data;
        } catch (e) {
            this.clear(key);
            return null;
        }
    }

    clear(key) {
        localStorage.removeItem(this.PREFIX + key);
    }

    clearAll() {
        Object.keys(localStorage)
            .filter(key => key.startsWith(this.PREFIX))
            .forEach(key => localStorage.removeItem(key));
    }
}

// ===============================
// APPLICATION CORE - COMPLETE VERSION
// ===============================
class SmartGroupEvaluator {
    constructor() {
        this.cache = new CacheManager();
        this.currentUser = null;
        this.isPublicMode = false;
        
        this.state = {
            groups: [],
            students: [],
            tasks: [],
            evaluations: [],
            admins: [],
            problemStats: {}
        };

        this.filters = {
            membersFilterGroupId: "",
            membersSearchTerm: "",
            cardsFilterGroupId: "",
            cardsSearchTerm: ""
        };

        this.PUBLIC_PAGES = ['dashboard', 'all-students', 'group-policy', 'export'];
        this.PRIVATE_PAGES = ['groups', 'members', 'group-members', 'tasks', 'evaluation', 'admin-management'];

        this.evaluationOptions = [
            { id: 'cannot_do', text: 'আমি পারিনা এই টপিক', marks: -5 },
            { id: 'learned_cannot_write', text: 'আমি টপিক শিখেছি তবে লিখতে পারিনা', marks: 5 },
            { id: 'learned_can_write', text: 'আমি টপিক শিখেছি ও লিখতে পারি', marks: 10 },
            { id: 'weekly_homework', text: 'আমি বাড়ির কাজ সপ্তাহে প্রতিদিন করিছি', marks: 15 },
            { id: 'weekly_attendance', text: 'আমি সপ্তাহে প্রতিদিন উপস্থিত ছিলাম', marks: 5 }
        ];

        this.roleNames = {
            "team-leader": "টিম লিডার",
            "time-keeper": "টাইম কিপার", 
            "reporter": "রিপোর্টার",
            "resource-manager": "রিসোর্স ম্যানেজার",
            "peace-maker": "পিস মেকার",
        };

        this.init();
    }

    async init() {
        this.setupDOMReferences();
        this.setupEventListeners();
        this.setupAuthStateListener();
        this.applySavedTheme();
    }

    setupDOMReferences() {
        this.dom = {
            authModal: document.getElementById("authModal"),
            appContainer: document.getElementById("appContainer"),
            loginForm: document.getElementById("loginForm"),
            registerForm: document.getElementById("registerForm"),
            showRegister: document.getElementById("showRegister"),
            showLogin: document.getElementById("showLogin"),
            loginBtn: document.getElementById("loginBtn"),
            registerBtn: document.getElementById("registerBtn"),
            googleSignInBtn: document.getElementById("googleSignInBtn"),
            logoutBtn: document.getElementById("logoutBtn"),
            themeToggle: document.getElementById("themeToggle"),
            mobileMenuBtn: document.getElementById("mobileMenuBtn"),
            sidebar: document.querySelector(".sidebar"),
            pageTitle: document.getElementById("pageTitle"),
            userInfo: document.getElementById("userInfo"),
            adminManagementSection: document.getElementById("adminManagementSection"),
            pages: document.querySelectorAll(".page"),
            navBtns: document.querySelectorAll(".nav-btn"),
            logoutModal: document.getElementById("logoutModal"),
            cancelLogout: document.getElementById("cancelLogout"),
            confirmLogout: document.getElementById("confirmLogout"),
            deleteModal: document.getElementById("deleteModal"),
            cancelDelete: document.getElementById("cancelDelete"),
            confirmDelete: document.getElementById("confirmDelete"),
            editModal: document.getElementById("editModal"),
            cancelEdit: document.getElementById("cancelEdit"),
            saveEdit: document.getElementById("saveEdit"),
            editModalTitle: document.getElementById("editModalTitle"),
            editModalContent: document.getElementById("editModalContent"),
            deleteModalText: document.getElementById("deleteModalText"),
            loadingOverlay: document.getElementById("loadingOverlay"),

            // Form elements
            groupNameInput: document.getElementById("groupNameInput"),
            addGroupBtn: document.getElementById("addGroupBtn"),
            groupsList: document.getElementById("groupsList"),
            studentNameInput: document.getElementById("studentNameInput"),
            studentRollInput: document.getElementById("studentRollInput"),
            studentGenderInput: document.getElementById("studentGenderInput"),
            studentGroupInput: document.getElementById("studentGroupInput"),
            studentContactInput: document.getElementById("studentContactInput"),
            studentAcademicGroupInput: document.getElementById("studentAcademicGroupInput"),
            studentSessionInput: document.getElementById("studentSessionInput"),
            addStudentBtn: document.getElementById("addStudentBtn"),
            studentsList: document.getElementById("studentsList"),
            allStudentsCards: document.getElementById("allStudentsCards"),
            tasksList: document.getElementById("tasksList"),
            taskNameInput: document.getElementById("taskNameInput"),
            taskDescriptionInput: document.getElementById("taskDescriptionInput"),
            taskMaxScoreInput: document.getElementById("taskMaxScoreInput"),
            taskDateInput: document.getElementById("taskDateInput"),
            addTaskBtn: document.getElementById("addTaskBtn"),
            evaluationTaskSelect: document.getElementById("evaluationTaskSelect"),
            evaluationGroupSelect: document.getElementById("evaluationGroupSelect"),
            startEvaluationBtn: document.getElementById("startEvaluationBtn"),
            evaluationForm: document.getElementById("evaluationForm")
        };
    }

    setupEventListeners() {
        // Auth events
        if (this.dom.showRegister) this.dom.showRegister.addEventListener("click", () => this.toggleAuthForms());
        if (this.dom.showLogin) this.dom.showLogin.addEventListener("click", () => this.toggleAuthForms(false));
        if (this.dom.loginBtn) this.dom.loginBtn.addEventListener("click", () => this.handleLogin());
        if (this.dom.registerBtn) this.dom.registerBtn.addEventListener("click", () => this.handleRegister());
        if (this.dom.googleSignInBtn) this.dom.googleSignInBtn.addEventListener("click", () => this.handleGoogleSignIn());

        // Logout events
        if (this.dom.logoutBtn) this.dom.logoutBtn.addEventListener("click", () => this.showLogoutModal());
        if (this.dom.cancelLogout) this.dom.cancelLogout.addEventListener("click", () => this.hideLogoutModal());
        if (this.dom.confirmLogout) this.dom.confirmLogout.addEventListener("click", () => this.handleLogout());

        // Modal events
        if (this.dom.cancelDelete) this.dom.cancelDelete.addEventListener("click", () => this.hideDeleteModal());
        if (this.dom.cancelEdit) this.dom.cancelEdit.addEventListener("click", () => this.hideEditModal());

        // Theme and mobile menu
        if (this.dom.themeToggle) this.dom.themeToggle.addEventListener("click", () => this.toggleTheme());
        if (this.dom.mobileMenuBtn) this.dom.mobileMenuBtn.addEventListener("click", () => this.toggleMobileMenu());

        // Navigation
        this.dom.navBtns.forEach(btn => {
            btn.addEventListener("click", (e) => this.handleNavigation(e));
        });

        // CRUD Operations
        if (this.dom.addGroupBtn) this.dom.addGroupBtn.addEventListener("click", () => this.addGroup());
        if (this.dom.addStudentBtn) this.dom.addStudentBtn.addEventListener("click", () => this.addStudent());
        if (this.dom.addTaskBtn) this.dom.addTaskBtn.addEventListener("click", () => this.addTask());
        if (this.dom.startEvaluationBtn) this.dom.startEvaluationBtn.addEventListener("click", () => this.startEvaluation());

        // Search and filter events
        this.setupSearchAndFilterEvents();
        this.setupModalCloseHandlers();
    }

    setupSearchAndFilterEvents() {
        // Search functionality
        const searchInputs = [
            { id: 'studentSearchInput', callback: (value) => this.handleStudentSearch(value) },
            { id: 'allStudentsSearchInput', callback: (value) => this.handleAllStudentsSearch(value) },
            { id: 'groupSearchInput', callback: (value) => this.handleGroupSearch(value) }
        ];

        searchInputs.forEach(({id, callback}) => {
            const element = document.getElementById(id);
            if (element) {
                element.addEventListener('input', (e) => callback(e.target.value));
            }
        });
    }

    setupModalCloseHandlers() {
        const modals = [this.dom.authModal, this.dom.deleteModal, this.dom.editModal, this.dom.logoutModal];
        modals.forEach(modal => {
            if (modal) {
                modal.addEventListener('click', (e) => {
                    if (e.target === modal) {
                        this.hideModal(modal);
                    }
                });
            }
        });
    }

    // ===============================
    // MODAL MANAGEMENT
    // ===============================
    showLogoutModal() {
        if (this.dom.logoutModal) this.dom.logoutModal.classList.remove("hidden");
    }

    hideLogoutModal() {
        if (this.dom.logoutModal) this.dom.logoutModal.classList.add("hidden");
    }

    hideDeleteModal() {
        if (this.dom.deleteModal) this.dom.deleteModal.style.display = "none";
    }

    hideEditModal() {
        if (this.dom.editModal) this.dom.editModal.style.display = "none";
    }

    hideModal(modal) {
        if (modal) {
            modal.style.display = 'none';
            if (modal.classList.contains('hidden') === false) {
                modal.classList.add('hidden');
            }
        }
    }

    // ===============================
    // AUTHENTICATION MANAGEMENT
    // ===============================
    setupAuthStateListener() {
        auth.onAuthStateChanged(async (user) => {
            this.currentUser = user;
            
            if (user) {
                await this.handleUserLogin(user);
            } else {
                this.handleUserLogout();
            }
        });
    }

    async handleUserLogin(user) {
        this.isPublicMode = false;
        if (this.dom.authModal) this.dom.authModal.style.display = "none";
        if (this.dom.appContainer) this.dom.appContainer.classList.remove("hidden");

        try {
            const userData = await this.getUserAdminData(user);
            this.updateUserInterface(userData);
            await this.loadInitialData();
        } catch (error) {
            console.error("Login handling error:", error);
            if (this.dom.userInfo) {
                this.dom.userInfo.innerHTML = `<div class="text-xs text-red-500">ডেটা লোড করতে সমস্যা</div>`;
            }
        }
    }

    handleUserLogout() {
        this.isPublicMode = false;
        if (this.dom.authModal) this.dom.authModal.style.display = "flex";
        if (this.dom.appContainer) this.dom.appContainer.classList.add("hidden");
        this.cache.clearAll();
    }

    async getUserAdminData(user) {
        const cacheKey = `admin_${user.uid}`;
        const cached = this.cache.get(cacheKey);
        if (cached) return cached;

        try {
            const byUid = await db.collection("admins").doc(user.uid).get();
            if (byUid.exists) {
                const data = byUid.data();
                this.cache.set(cacheKey, data);
                return data;
            }

            const byEmailSnap = await db.collection("admins").where("email", "==", user.email).limit(1).get();
            if (!byEmailSnap.empty) {
                const data = byEmailSnap.docs[0].data();
                this.cache.set(cacheKey, data);
                return data;
            }

            return null;
        } catch (error) {
            console.error("Error fetching admin data:", error);
            return null;
        }
    }

    async handleLogin() {
        const email = document.getElementById("loginEmail")?.value.trim();
        const password = document.getElementById("loginPassword")?.value;
        
        if (!this.validateEmail(email)) {
            alert("সঠিক ইমেইল ঠিকানা লিখুন");
            return;
        }

        this.showLoading();
        try {
            await auth.signInWithEmailAndPassword(email, password);
        } catch (error) {
            alert("লগইন ব্যর্থ: " + error.message);
        } finally {
            this.hideLoading();
        }
    }

    async handleRegister() {
        const email = document.getElementById("registerEmail")?.value.trim();
        const password = document.getElementById("registerPassword")?.value;
        const adminType = document.getElementById("adminType")?.value;

        if (!this.validateEmail(email)) {
            alert("সঠিক ইমেইল ঠিকানা লিখুন");
            return;
        }

        this.showLoading();
        try {
            const userCredential = await auth.createUserWithEmailAndPassword(email, password);
            const user = userCredential.user;
            
            await db.collection("admins").doc(user.uid).set({
                email,
                type: adminType,
                createdAt: firebase.firestore.FieldValue.serverTimestamp(),
            });

            alert("রেজিস্ট্রেশন সফল!");
            this.toggleAuthForms(false);
        } catch (error) {
            alert("রেজিস্ট্রেশন ব্যর্থ: " + error.message);
        } finally {
            this.hideLoading();
        }
    }

    async handleGoogleSignIn() {
        this.showLoading();
        try {
            const result = await auth.signInWithPopup(googleProvider);
            const user = result.user;
            
            const adminDoc = await db.collection("admins").doc(user.uid).get();
            if (!adminDoc.exists) {
                await db.collection("admins").doc(user.uid).set({
                    email: user.email,
                    type: "admin",
                    createdAt: firebase.firestore.FieldValue.serverTimestamp(),
                });
            }
        } catch (error) {
            alert("Google লগইন ব্যর্থ: " + error.message);
        } finally {
            this.hideLoading();
        }
    }

    async handleLogout() {
        try {
            await auth.signOut();
            this.hideLogoutModal();
        } catch (error) {
            console.error("Logout error:", error);
        }
    }

    // ===============================
    // DATA MANAGEMENT
    // ===============================
    async loadInitialData() {
        this.showLoading();
        try {
            await Promise.all([
                this.loadGroups(),
                this.loadStudents(),
                this.loadTasks(),
                this.loadEvaluations()
            ]);
        } catch (error) {
            console.error("Initial data load error:", error);
        } finally {
            this.hideLoading();
        }
    }

    async loadGroups() {
        try {
            const snap = await db.collection("groups").orderBy("name").get();
            this.state.groups = snap.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            this.cache.set('groups', this.state.groups);
            this.renderGroups();
        } catch (error) {
            console.error("Error loading groups:", error);
            const cached = this.cache.get('groups');
            if (cached) this.state.groups = cached;
        }
    }

    async loadStudents() {
        try {
            const snap = await db.collection("students").orderBy("name").get();
            this.state.students = snap.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            this.cache.set('students', this.state.students);
            this.renderStudentsList();
            this.renderStudentCards();
        } catch (error) {
            console.error("Error loading students:", error);
        }
    }

    async loadTasks() {
        try {
            const snap = await db.collection("tasks").orderBy("date", "desc").get();
            this.state.tasks = snap.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            this.cache.set('tasks', this.state.tasks);
            this.renderTasks();
        } catch (error) {
            console.error("Error loading tasks:", error);
        }
    }

    async loadEvaluations() {
        try {
            const snap = await db.collection("evaluations").get();
            this.state.evaluations = snap.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            this.cache.set('evaluations', this.state.evaluations);
            this.calculateProblemSolvingStats();
        } catch (error) {
            console.error("Error loading evaluations:", error);
        }
    }

    // ===============================
    // RENDER METHODS - COMPLETE
    // ===============================
    renderGroups() {
        if (!this.dom.groupsList) return;

        const memberCountMap = this.computeMemberCountMap();
        
        this.dom.groupsList.innerHTML = this.state.groups.map(group => `
            <div class="flex justify-between items-center p-3 border border-gray-200 dark:border-gray-700 rounded-lg">
                <div>
                    <div class="font-medium">${group.name}</div>
                    <div class="text-sm text-gray-500">সদস্য: ${memberCountMap[group.id] || 0} জন</div>
                </div>
                <div class="flex gap-2">
                    <button class="edit-group-btn px-3 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 rounded-lg text-sm" data-id="${group.id}">সম্পাদনা</button>
                    <button class="delete-group-btn px-3 py-1 bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200 rounded-lg text-sm" data-id="${group.id}">ডিলিট</button>
                </div>
            </div>
        `).join('');

        // Add event listeners
        this.attachGroupEventListeners();
    }

    renderStudentsList() {
        if (!this.dom.studentsList) return;

        const filteredStudents = this.getFilteredStudents();
        
        this.dom.studentsList.innerHTML = filteredStudents.map(student => {
            const group = this.state.groups.find(g => g.id === student.groupId);
            return `
                <div class="flex justify-between items-center p-3 border border-gray-200 dark:border-gray-700 rounded-lg">
                    <div>
                        <div class="font-medium">${student.name}</div>
                        <div class="text-sm text-gray-500">রোল: ${student.roll} | লিঙ্গ: ${student.gender} | গ্রুপ: ${group?.name || 'না'}</div>
                        <div class="text-sm text-gray-500">একাডেমিক: ${student.academicGroup || 'না'} | সেশন: ${student.session || 'না'}</div>
                    </div>
                    <div class="flex gap-2">
                        <button class="edit-student-btn px-3 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 rounded-lg text-sm" data-id="${student.id}">সম্পাদনা</button>
                        <button class="delete-student-btn px-3 py-1 bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200 rounded-lg text-sm" data-id="${student.id}">ডিলিট</button>
                    </div>
                </div>
            `;
        }).join('');

        this.attachStudentEventListeners();
    }

    renderStudentCards() {
        if (!this.dom.allStudentsCards) return;

        const filteredStudents = this.getFilteredStudents();
        
        this.dom.allStudentsCards.innerHTML = filteredStudents.map((student, index) => {
            const group = this.state.groups.find(g => g.id === student.groupId);
            const groupIndex = this.state.groups.findIndex(g => g.id === student.groupId);
            const cardColorClass = `group-card-${((groupIndex % 8) + 8) % 8 + 1}`;
            
            const roleBadge = student.role ? 
                `<span class="member-role-badge ${student.role}">${this.roleNames[student.role] || student.role}</span>` :
                `<span class="px-2 py-1 text-xs rounded-md bg-yellow-100 text-yellow-800">দায়িত্ব বাকি</span>`;

            return `
                <div class="student-card ${cardColorClass} glass-card p-4 rounded-xl shadow-md relative overflow-hidden">
                    <span class="group-serial">${index + 1}</span>
                    <div class="flex items-start mb-3">
                        <div class="student-avatar ${student.gender === 'মেয়ে' ? 'bg-pink-500' : 'bg-blue-500'}">
                            ${student.name.charAt(0)}
                        </div>
                        <div class="flex-1">
                            <h3 class="font-bold text-lg">${student.name}</h3>
                            <div class="mt-1">${roleBadge}</div>
                        </div>
                    </div>
                    <div class="grid grid-cols-1 gap-2 text-sm">
                        <p><i class="fas fa-id-card mr-2"></i> রোল: ${student.roll}</p>
                        <p><i class="fas fa-venus-mars mr-2"></i> লিঙ্গ: ${student.gender}</p>
                        <p><i class="fas fa-users mr-2"></i> গ্রুপ: ${group?.name || 'না'}</p>
                        <p><i class="fas fa-book mr-2"></i> একাডেমিক: ${student.academicGroup || 'না'}</p>
                        <p><i class="fas fa-calendar mr-2"></i> সেশন: ${student.session || 'না'}</p>
                        ${student.contact ? `<p><i class="fas fa-envelope mr-2"></i> ${student.contact}</p>` : ''}
                    </div>
                </div>
            `;
        }).join('');
    }

    renderTasks() {
        if (!this.dom.tasksList) return;

        this.dom.tasksList.innerHTML = this.state.tasks.map(task => {
            const dateStr = task.date?.seconds ? 
                new Date(task.date.seconds * 1000).toLocaleDateString("bn-BD") : 
                'তারিখ নেই';
                
            return `
                <div class="border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden">
                    <div class="p-4 bg-gray-50 dark:bg-gray-800 flex justify-between items-center">
                        <div>
                            <h3 class="font-semibold">${task.name}</h3>
                            <p class="text-sm text-gray-500">তারিখ: ${dateStr} | সর্বোচ্চ স্কোর: ${task.maxScore}</p>
                        </div>
                        <div class="flex gap-2">
                            <button class="edit-task-btn px-3 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 rounded-lg text-sm" data-id="${task.id}">সম্পাদনা</button>
                            <button class="delete-task-btn px-3 py-1 bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200 rounded-lg text-sm" data-id="${task.id}">ডিলিট</button>
                        </div>
                    </div>
                    <div class="p-4">
                        <p class="text-gray-600 dark:text-gray-300">${task.description || 'কোন বিবরণ নেই'}</p>
                    </div>
                </div>
            `;
        }).join('');

        this.attachTaskEventListeners();
    }

    // ===============================
    // DASHBOARD RENDER METHODS
    // ===============================
    renderStatsSummary() {
        const statsEl = document.getElementById("statsSummary");
        if (!statsEl) return;

        const totalGroups = this.state.groups.length;
        const totalStudents = this.state.students.length;
        const withoutRole = this.state.students.filter(s => !s.role).length;

        // Academic groups count
        const academicGroups = new Set(this.state.students.map(s => s.academicGroup)).size;

        // Gender counts
        const genderCount = { 'ছেলে': 0, 'মেয়ে': 0 };
        this.state.students.forEach(s => {
            if (s.gender === 'ছেলে') genderCount['ছেলে']++;
            else if (s.gender === 'মেয়ে') genderCount['মেয়ে']++;
        });

        // Problem solving stats
        const problemStats = this.state.problemStats;

        const card = (title, value, icon, color) => `
            <div class="glass-card rounded-xl p-4 shadow-md flex items-center gap-3">
                <div class="p-3 rounded-lg ${color} text-white"><i class="${icon}"></i></div>
                <div>
                    <div class="text-xs text-gray-500 dark:text-gray-300">${title}</div>
                    <div class="text-2xl font-bold">${value}</div>
                </div>
            </div>
        `;

        statsEl.innerHTML = [
            card("মোট গ্রুপ", totalGroups, "fas fa-layer-group", "bg-blue-500"),
            card("মোট শিক্ষার্থী", totalStudents, "fas fa-user-graduate", "bg-green-500"),
            card("একাডেমিক গ্রুপ", academicGroups, "fas fa-book", "bg-purple-500"),
            card("দায়িত্ব বাকি", withoutRole, "fas fa-hourglass-half", "bg-amber-500"),
            card("ছেলে", genderCount['ছেলে'], "fas fa-male", "bg-blue-400"),
            card("মেয়ে", genderCount['মেয়ে'], "fas fa-female", "bg-pink-400"),
            card("প্রবলেম সলভ", problemStats.totalProblems || 0, "fas fa-tasks", "bg-indigo-500"),
            card("উচ্চ পারদর্শিতা", problemStats.learnedCanWrite || 0, "fas fa-star", "bg-yellow-500")
        ].join("");
    }

    renderGenderStats() {
        const container = document.getElementById("genderStatsList");
        if (!container) return;

        const genderCount = { 'ছেলে': 0, 'মেয়ে': 0, 'অন্যান্য': 0 };
        this.state.students.forEach(s => {
            if (s.gender in genderCount) {
                genderCount[s.gender]++;
            } else {
                genderCount['অন্যান্য']++;
            }
        });

        const total = this.state.students.length;
        container.innerHTML = Object.entries(genderCount).map(([gender, count]) => {
            const percent = total > 0 ? Math.round((count / total) * 100) : 0;
            return `
                <div class="glass-card rounded-lg p-4">
                    <div class="flex justify-between mb-1">
                        <div class="font-medium">${gender}</div>
                        <div class="text-sm text-gray-500">${count} (${percent}%)</div>
                    </div>
                    <div class="progress-bar">
                        <div class="progress-fill bg-blue-500" style="width:${percent}%"></div>
                    </div>
                </div>
            `;
        }).join('');
    }

    calculateProblemSolvingStats() {
        const stats = {
            totalProblems: 0,
            cannotDo: 0,
            learnedCannotWrite: 0,
            learnedCanWrite: 0,
            weeklyHomework: 0,
            weeklyAttendance: 0
        };

        this.state.evaluations.forEach(evalItem => {
            if (!evalItem.scores) return;
            Object.values(evalItem.scores).forEach(score => {
                stats.totalProblems++;
                if (score.optionMarks) {
                    Object.values(score.optionMarks).forEach(opt => {
                        if (opt.selected) {
                            switch(opt.optionId) {
                                case 'cannot_do': stats.cannotDo++; break;
                                case 'learned_cannot_write': stats.learnedCannotWrite++; break;
                                case 'learned_can_write': stats.learnedCanWrite++; break;
                                case 'weekly_homework': stats.weeklyHomework++; break;
                                case 'weekly_attendance': stats.weeklyAttendance++; break;
                            }
                        }
                    });
                }
            });
        });

        this.state.problemStats = stats;
        this.renderProblemSolvingStats();
    }

    renderProblemSolvingStats() {
        const container = document.getElementById("problemSolvingStatsList");
        if (!container) return;

        const stats = this.state.problemStats;
        const total = stats.totalProblems || 1;

        const items = [
            { label: 'পারিনা এই টপিক', count: stats.cannotDo, color: 'bg-red-500' },
            { label: 'শিখেছি কিন্তু লিখতে পারিনা', count: stats.learnedCannotWrite, color: 'bg-orange-500' },
            { label: 'শিখেছি ও লিখতে পারি', count: stats.learnedCanWrite, color: 'bg-green-500' },
            { label: 'সাপ্তাহিক বাড়ির কাজ', count: stats.weeklyHomework, color: 'bg-blue-500' },
            { label: 'সাপ্তাহিক উপস্থিতি', count: stats.weeklyAttendance, color: 'bg-purple-500' }
        ];

        container.innerHTML = items.map(item => {
            const percent = Math.round((item.count / total) * 100);
            return `
                <div class="glass-card rounded-lg p-4">
                    <div class="flex justify-between mb-1">
                        <div class="font-medium">${item.label}</div>
                        <div class="text-sm text-gray-500">${item.count} (${percent}%)</div>
                    </div>
                    <div class="progress-bar">
                        <div class="progress-fill ${item.color}" style="width:${percent}%"></div>
                    </div>
                </div>
            `;
        }).join('');
    }

    // ===============================
    // CRUD OPERATIONS
    // ===============================
    async addGroup() {
        const name = this.dom.groupNameInput?.value.trim();
        if (!name) {
            alert("গ্রুপের নাম লিখুন");
            return;
        }

        this.showLoading();
        try {
            await db.collection("groups").add({
                name,
                memberCount: 0,
                createdAt: firebase.firestore.FieldValue.serverTimestamp(),
            });
            if (this.dom.groupNameInput) this.dom.groupNameInput.value = "";
            await this.loadGroups();
        } catch (error) {
            alert("গ্রুপ যোগ করতে সমস্যা: " + error.message);
        } finally {
            this.hideLoading();
        }
    }

    async addStudent() {
        const studentData = this.getStudentFormData();
        if (!studentData) return;

        this.showLoading();
        try {
            // Check uniqueness
            const isDuplicate = await this.checkStudentUniqueness(studentData.roll, studentData.academicGroup);
            if (isDuplicate) {
                alert("এই রোল ও একাডেমিক গ্রুপের শিক্ষার্থী already exists");
                this.hideLoading();
                return;
            }

            await db.collection("students").add({
                ...studentData,
                role: "",
                createdAt: firebase.firestore.FieldValue.serverTimestamp(),
            });

            this.clearStudentForm();
            await this.loadStudents();
            this.renderGroups(); // Update group counts
        } catch (error) {
            alert("শিক্ষার্থী যোগ করতে সমস্যা: " + error.message);
        } finally {
            this.hideLoading();
        }
    }

    async addTask() {
        const taskData = this.getTaskFormData();
        if (!taskData) return;

        this.showLoading();
        try {
            await db.collection("tasks").add({
                ...taskData,
                createdAt: firebase.firestore.FieldValue.serverTimestamp(),
            });
            this.clearTaskForm();
            await this.loadTasks();
        } catch (error) {
            alert("টাস্ক যোগ করতে সমস্যা: " + error.message);
        } finally {
            this.hideLoading();
        }
    }

    // ===============================
    // UTILITY METHODS
    // ===============================
    getStudentFormData() {
        const fields = [
            'studentNameInput', 'studentRollInput', 'studentGenderInput', 
            'studentGroupInput', 'studentContactInput', 'studentAcademicGroupInput', 'studentSessionInput'
        ];

        const data = {};
        for (const field of fields) {
            const element = this.dom[field];
            if (!element) continue;
            const value = element.value.trim();
            if (!value && field !== 'studentContactInput') {
                alert("সমস্ত প্রয়োজনীয় তথ্য পূরণ করুন");
                return null;
            }
            
            // Convert field name to database field name
            const fieldName = field.replace('student', '').replace('Input', '').toLowerCase();
            data[fieldName] = value;
        }
        return data;
    }

    getTaskFormData() {
        const name = this.dom.taskNameInput?.value.trim();
        const description = this.dom.taskDescriptionInput?.value.trim();
        const maxScore = parseInt(this.dom.taskMaxScoreInput?.value);
        const date = this.dom.taskDateInput?.value;

        if (!name || !description || !maxScore || !date) {
            alert("সমস্ত তথ্য পূরণ করুন");
            return null;
        }

        return { name, description, maxScore, date: new Date(date) };
    }

    clearStudentForm() {
        const fields = [
            'studentNameInput', 'studentRollInput', 'studentGenderInput', 
            'studentGroupInput', 'studentContactInput', 'studentAcademicGroupInput', 'studentSessionInput'
        ];
        fields.forEach(field => {
            if (this.dom[field]) this.dom[field].value = '';
        });
    }

    clearTaskForm() {
        if (this.dom.taskNameInput) this.dom.taskNameInput.value = '';
        if (this.dom.taskDescriptionInput) this.dom.taskDescriptionInput.value = '';
        if (this.dom.taskMaxScoreInput) this.dom.taskMaxScoreInput.value = '';
        if (this.dom.taskDateInput) this.dom.taskDateInput.value = '';
    }

    computeMemberCountMap() {
        const map = {};
        this.state.groups.forEach(g => { map[g.id] = 0; });
        this.state.students.forEach(s => {
            if (s.groupId) map[s.groupId] = (map[s.groupId] || 0) + 1;
        });
        return map;
    }

    getFilteredStudents() {
        let students = this.state.students;
        
        // Apply group filter
        if (this.filters.membersFilterGroupId) {
            students = students.filter(s => s.groupId === this.filters.membersFilterGroupId);
        }
        
        // Apply search filter
        if (this.filters.membersSearchTerm) {
            const term = this.filters.membersSearchTerm.toLowerCase();
            students = students.filter(s => 
                s.name.toLowerCase().includes(term) ||
                s.roll.toLowerCase().includes(term) ||
                (s.academicGroup && s.academicGroup.toLowerCase().includes(term))
            );
        }
        
        return students;
    }

    validateEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    }

    async checkStudentUniqueness(roll, academicGroup, excludeId = null) {
        const query = await db.collection("students")
            .where("roll", "==", roll)
            .where("academicGroup", "==", academicGroup)
            .get();
        return !query.empty && query.docs.some(doc => doc.id !== excludeId);
    }

    // ===============================
    // EVENT HANDLER ATTACHMENT
    // ===============================
    attachGroupEventListeners() {
        document.querySelectorAll('.edit-group-btn').forEach(btn => {
            btn.addEventListener('click', () => this.editGroup(btn.dataset.id));
        });
        document.querySelectorAll('.delete-group-btn').forEach(btn => {
            btn.addEventListener('click', () => this.deleteGroup(btn.dataset.id));
        });
    }

    attachStudentEventListeners() {
        document.querySelectorAll('.edit-student-btn').forEach(btn => {
            btn.addEventListener('click', () => this.editStudent(btn.dataset.id));
        });
        document.querySelectorAll('.delete-student-btn').forEach(btn => {
            btn.addEventListener('click', () => this.deleteStudent(btn.dataset.id));
        });
    }

    attachTaskEventListeners() {
        document.querySelectorAll('.edit-task-btn').forEach(btn => {
            btn.addEventListener('click', () => this.editTask(btn.dataset.id));
        });
        document.querySelectorAll('.delete-task-btn').forEach(btn => {
            btn.addEventListener('click', () => this.deleteTask(btn.dataset.id));
        });
    }

    // ===============================
    // UI MANAGEMENT
    // ===============================
    toggleAuthForms(showRegister = true) {
        if (showRegister) {
            if (this.dom.loginForm) this.dom.loginForm.classList.add("hidden");
            if (this.dom.registerForm) this.dom.registerForm.classList.remove("hidden");
        } else {
            if (this.dom.registerForm) this.dom.registerForm.classList.add("hidden");
            if (this.dom.loginForm) this.dom.loginForm.classList.remove("hidden");
        }
    }

    toggleTheme() {
        const root = document.documentElement;
        if (root.classList.contains("dark")) {
            root.classList.remove("dark");
            if (this.dom.themeToggle) this.dom.themeToggle.innerHTML = '<i class="fas fa-moon"></i>';
            localStorage.setItem("theme", "light");
        } else {
            root.classList.add("dark");
            if (this.dom.themeToggle) this.dom.themeToggle.innerHTML = '<i class="fas fa-sun"></i>';
            localStorage.setItem("theme", "dark");
        }
    }

    applySavedTheme() {
        if (localStorage.getItem("theme") === "dark") {
            document.documentElement.classList.add("dark");
            if (this.dom.themeToggle) this.dom.themeToggle.innerHTML = '<i class="fas fa-sun"></i>';
        }
    }

    toggleMobileMenu() {
        if (this.dom.sidebar) {
            this.dom.sidebar.classList.toggle("hidden-mobile");
            this.dom.sidebar.classList.toggle("active-mobile");
        }
    }

    showLoading() {
        if (this.dom.loadingOverlay) {
            this.dom.loadingOverlay.style.display = "flex";
        }
    }

    hideLoading() {
        if (this.dom.loadingOverlay) {
            this.dom.loadingOverlay.style.display = "none";
        }
    }

    updateUserInterface(userData) {
        if (!this.dom.userInfo) return;

        if (userData) {
            this.dom.userInfo.innerHTML = `
                <div class="font-medium">${userData.email}</div>
                <div class="text-xs ${userData.type === "super-admin" ? "text-accent" : "text-gray-500"}">
                    ${userData.type === "super-admin" ? "সুপার অ্যাডমিন" : "অ্যাডমিন"}
                </div>
            `;
            
            if (userData.type === "super-admin") {
                if (this.dom.adminManagementSection) this.dom.adminManagementSection.classList.remove("hidden");
            } else {
                if (this.dom.adminManagementSection) this.dom.adminManagementSection.classList.add("hidden");
            }
        } else {
            this.dom.userInfo.innerHTML = `<div class="text-xs text-gray-500">সাধারণ ব্যবহারকারী</div>`;
            if (this.dom.adminManagementSection) this.dom.adminManagementSection.classList.add("hidden");
        }
    }

    async handleNavigation(event) {
        const btn = event.currentTarget;
        const pageId = btn.getAttribute("data-page");

        if (!this.currentUser && this.PRIVATE_PAGES.includes(pageId)) {
            alert("এই পেজ দেখতে লগইন প্রয়োজন");
            return;
        }

        // Update navigation
        this.dom.navBtns.forEach(navBtn => {
            navBtn.classList.remove("bg-blue-50", "dark:bg-blue-900/30", "text-blue-600", "dark:text-blue-400");
        });
        btn.classList.add("bg-blue-50", "dark:bg-blue-900/30", "text-blue-600", "dark:text-blue-400");

        // Show page
        this.dom.pages.forEach(page => page.classList.add("hidden"));
        const selectedPage = document.getElementById(`page-${pageId}`);
        if (selectedPage) {
            selectedPage.classList.remove("hidden");
            if (this.dom.pageTitle) this.dom.pageTitle.textContent = btn.textContent.trim();

            // Load page data
            if (pageId === 'dashboard') {
                await this.loadDashboard();
            }
        }
    }

    async loadDashboard() {
        await this.loadEvaluations();
        this.renderStatsSummary();
        this.renderGenderStats();
        this.renderProblemSolvingStats();
    }

    // Search handlers
    handleStudentSearch(value) {
        this.filters.membersSearchTerm = value.toLowerCase();
        this.renderStudentsList();
    }

    handleAllStudentsSearch(value) {
        this.filters.cardsSearchTerm = value.toLowerCase();
        this.renderStudentCards();
    }

    handleGroupSearch(value) {
        // Implement group search later
        console.log('Group search:', value);
    }

    // Evaluation method
    async startEvaluation() {
        const taskId = this.dom.evaluationTaskSelect?.value;
        const groupId = this.dom.evaluationGroupSelect?.value;
        
        if (!taskId || !groupId) {
            alert("একটি টাস্ক এবং গ্রুপ নির্বাচন করুন");
            return;
        }

        // Find existing evaluation
        let existingEvaluation = null;
        try {
            const evalQuery = await db.collection("evaluations")
                .where("taskId", "==", taskId)
                .where("groupId", "==", groupId)
                .get();
                
            if (!evalQuery.empty) {
                existingEvaluation = {
                    id: evalQuery.docs[0].id,
                    ...evalQuery.docs[0].data()
                };
            }
        } catch (error) {
            console.error("Error checking existing evaluation:", error);
        }

        this.renderEvaluationForm(taskId, groupId, existingEvaluation);
    }

    renderEvaluationForm(taskId, groupId, existingEvaluation = null) {
        if (!this.dom.evaluationForm) return;

        const task = this.state.tasks.find(t => t.id === taskId);
        const group = this.state.groups.find(g => g.id === groupId);
        const groupStudents = this.state.students.filter(s => s.groupId === groupId);

        if (!task || !group || groupStudents.length === 0) {
            this.dom.evaluationForm.innerHTML = '<p class="text-center text-gray-500 py-8">গ্রুপে কোন সদস্য নেই</p>';
            return;
        }

        let formHTML = `
            <div class="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg mb-4">
                <p class="text-sm"><strong>টাস্ক:</strong> ${task.name}</p>
                <p class="text-sm"><strong>সর্বোচ্চ স্কোর:</strong> ${task.maxScore}</p>
                <p class="text-sm"><strong>গ্রুপ:</strong> ${group.name}</p>
            </div>
        `;

        groupStudents.forEach((student) => {
            const existingScore = existingEvaluation?.scores?.[student.id] || {};
            
            formHTML += `
                <div class="border border-gray-200 dark:border-gray-700 rounded-lg p-4 mb-4">
                    <h4 class="font-semibold mb-3">${student.name} (${student.roll})</h4>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
                        <div>
                            <label class="block text-sm font-medium mb-1">টাস্ক স্কোর (০-${task.maxScore})</label>
                            <input type="number" min="0" max="${task.maxScore}" 
                                class="task-score w-full border border-gray-300 dark:border-gray-600 rounded-lg px-3 py-2 dark:bg-gray-700" 
                                value="${existingScore.taskScore || 0}" 
                                data-student="${student.id}">
                        </div>
                        <div>
                            <label class="block text-sm font-medium mb-1">টিমওয়ার্ক স্কোর (০-১০)</label>
                            <input type="number" min="0" max="10" 
                                class="teamwork-score w-full border border-gray-300 dark:border-gray-600 rounded-lg px-3 py-2 dark:bg-gray-700" 
                                value="${existingScore.teamworkScore || 0}" 
                                data-student="${student.id}">
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="block text-sm font-medium mb-2">মন্তব্য</label>
                        <textarea class="comments w-full border border-gray-300 dark:border-gray-600 rounded-lg px-3 py-2 dark:bg-gray-700" 
                            rows="2" 
                            data-student="${student.id}" 
                            placeholder="মন্তব্য লিখুন...">${existingScore.comments || ''}</textarea>
                    </div>
                </div>
            `;
        });

        formHTML += `
            <div class="mt-4">
                <button id="saveEvaluationBtn" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors">
                    মূল্যায়ন সংরক্ষণ করুন
                </button>
            </div>
        `;

        this.dom.evaluationForm.innerHTML = formHTML;

        // Add event listener for save button
        const saveBtn = document.getElementById('saveEvaluationBtn');
        if (saveBtn) {
            saveBtn.addEventListener('click', () => {
                this.saveEvaluation(taskId, groupId, existingEvaluation?.id);
            });
        }
    }

    async saveEvaluation(taskId, groupId, evaluationId = null) {
        const taskScores = document.querySelectorAll(".task-score");
        const teamworkScores = document.querySelectorAll(".teamwork-score");
        const comments = document.querySelectorAll(".comments");
        
        const scores = {};

        taskScores.forEach((input, index) => {
            const studentId = input.getAttribute("data-student");
            const taskScore = parseInt(input.value) || 0;
            const teamworkScore = parseInt(teamworkScores[index].value) || 0;
            const comment = comments[index].value || "";

            scores[studentId] = { 
                taskScore, 
                teamworkScore, 
                comments: comment
            };
        });

        this.showLoading();

        const payload = {
            taskId, 
            groupId, 
            scores,
            updatedAt: firebase.firestore.FieldValue.serverTimestamp(),
        };

        try {
            if (evaluationId) {
                await db.collection("evaluations").doc(evaluationId).update(payload);
            } else {
                payload.createdAt = firebase.firestore.FieldValue.serverTimestamp();
                await db.collection("evaluations").add(payload);
            }

            this.hideLoading();
            alert("মূল্যায়ন সফলভাবে সংরক্ষণ করা হয়েছে");
            
            // Refresh data
            await this.loadEvaluations();
            
            if (document.getElementById('page-dashboard') && !document.getElementById('page-dashboard').classList.contains('hidden')) {
                await this.loadDashboard();
            }
        } catch (error) {
            this.hideLoading();
            alert("মূল্যায়ন সংরক্ষণ করতে সমস্যা হয়েছে: " + error.message);
        }
    }

    // Placeholder methods for edit/delete operations
    editGroup(id) { 
        alert('Edit group functionality will be implemented: ' + id); 
    }
    
    deleteGroup(id) { 
        if (confirm('আপনি কি এই গ্রুপটি ডিলিট করতে চান?')) {
            alert('Delete group: ' + id);
        }
    }
    
    editStudent(id) { 
        alert('Edit student functionality will be implemented: ' + id); 
    }
    
    deleteStudent(id) { 
        if (confirm('আপনি কি এই শিক্ষার্থীটি ডিলিট করতে চান?')) {
            alert('Delete student: ' + id);
        }
    }
    
    editTask(id) { 
        alert('Edit task functionality will be implemented: ' + id); 
    }
    
    deleteTask(id) { 
        if (confirm('আপনি কি এই টাস্কটি ডিলিট করতে চান?')) {
            alert('Delete task: ' + id);
        }
    }
}

// Initialize application
document.addEventListener('DOMContentLoaded', () => {
    window.smartEvaluator = new SmartGroupEvaluator();
});